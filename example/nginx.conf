events {
    worker_connections  1024;
}

error_log  logs/error.log error;

http {
    include       mime.types;
    default_type  application/octet-stream;

    access_log  logs/access.log  main;
    resolver 8.8.8.8;

    lua_shared_dict my_upstream 1m;
    lua_socket_log_errors off;

    lua_package_path "/path/to/lua-resty-http/lib/?.lua;;";

    init_by_lua '
        require("cjson")

        Upstream_Socket  = require("resty.upstream.socket")
        Upstream_HTTP = require("resty.upstream.http")
        Upstream_Api = require("resty.upstream.api")

        upstream, configured = Upstream_Socket:new("my_upstream")
        api = Upstream_Api:new(upstream)

        if not configured then -- Only reconfigure on start, shared mem persists across a HUP
            api:create_pool({id = "primary", timeout = 100, keepalive_pool = 256, keepalive_timeout = (120*1000) })

            api:add_host("primary", { host = "127.0.0.1", port = "81", weight = 10 })
            api:add_host("primary", { host = "127.0.0.1", port = "82",  weight = 10 })

            api:create_pool({id = "dr", timeout = 100, priority = 10, read_timeout = 60000})
            api:add_host("dr", { host = "10.10.10.10", port = "81", weight = 10 })
            api:add_host("dr", { host = "10.10.10.10", port = "82",  weight = 10 })

        end

    ';

    server {
        listen 80;
        server_name lua-load-balancer;

        location / {
            content_by_lua_file lua-resty-upstream/examples/load-balancer.lua;
            log_by_lua '
                upstream:post_process()
            ';
        }

    }

    server {
        listen 8080;
        server_name api;

        location = /pools {
            content_by_lua '
                local pools, err = api:get_pools()
                if not pools then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                else
                    ngx.print(cjson.encode(pools))
                end
            ';
        }

        location ~ ^/down_host/([^[/]+)/([^[/]+)$ {
            content_by_lua '
                local host = ngx.var[2]
                local pool = ngx.var[1]
                local ok, err = api:down_host(pool, host)
                if not ok then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                end
            ';
        }
        location ~ ^/up_host/([^[/]+)/([^[/]+)$ {
            content_by_lua '
                local host = ngx.var[2]
                local pool = ngx.var[1]
                local ok, err = api:up_host(pool, host)
                if not ok then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                end
            ';
        }
    }
}

