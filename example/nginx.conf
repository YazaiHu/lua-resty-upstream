events {
    worker_connections  1024;
}

error_log  logs/error.log error;

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" [$request_time]';

    access_log  logs/access.log  main;
    resolver 8.8.8.8;

    ssl_certificate         /path/to/your/cert.crt;
    ssl_certificate_key     /path/to/your/key.key;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA:AES128-GCM-SHA256:ECDHE-RSA-RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!CAMELLIA;
    ssl_prefer_server_ciphers  on;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 5m;

    lua_shared_dict my_upstream 1m;
    lua_socket_log_errors off;

    lua_package_path "/path/to/lua-resty-http/lib/?.lua;;";

    init_by_lua '
        Upstream_Socket  = require("resty.upstream.socket")
        Upstream_HTTP = require("resty.upstream.http")
        Upstream_Api = require("resty.upstream.api")

        local configured

        upstream, configured = Upstream_Socket:new("my_upstream")
        if not upstream then
            error(configured)
        end
        api            = Upstream_Api:new(upstream)
        http_upstream  = Upstream_HTTP:new(upstream)

        if not configured then -- Only reconfigure on start, shared mem persists across a HUP
            api:create_pool({id = "primary", timeout = 100, read_timeout = 10000, keepalive_pool = 256, keepalive_timeout = (120*1000)})

            api:add_host("primary", { host = "127.0.0.1", port = "81", weight = 10, healthcheck = true})
            api:add_host("primary", { host = "127.0.0.1", port = "82",  weight = 10, healthcheck = true})

            api:create_pool({id = "dr", timeout = 100, priority = 10, read_timeout = 60000})
            api:add_host("dr", { host = "10.10.10.10", port = "81", weight = 10})
            api:add_host("dr", { host = "10.10.10.10", port = "82",  weight = 10})

        end

        upstream_ssl, configured = Upstream_Socket:new("my_upstream", "ssl_upstream")
        if not upstream_ssl then
            error(configured)
        end
        api_ssl        = Upstream_Api:new(upstream_ssl)
        https_upstream = Upstream_HTTP:new(upstream_ssl, {ssl = true, ssl_verify = true, sni_host = "foo.example.com" })

        if not configured then -- Only reconfigure on start, shared mem persists across a HUP
            api_ssl:create_pool({id = "primary", timeout = 100, read_timeout = 10000, keepalive_pool = 256, keepalive_timeout = (120*1000)})

            api_ssl:add_host("primary", { host = "127.0.0.1", port = "83", weight = 10, healthcheck = true})
            api_ssl:add_host("primary", { host = "127.0.0.1", port = "84",  weight = 10, healthcheck = true})

            api_ssl:create_pool({id = "dr", timeout = 100, priority = 10, read_timeout = 60000})
            api_ssl:add_host("dr", { host = "10.10.10.10", port = "83", weight = 10})
            api_ssl:add_host("dr", { host = "10.10.10.10", port = "84",  weight = 10})

        end

    ';

    init_worker_by_lua '
        http_upstream:init_background_thread()
        https_upstream:init_background_thread()
    ';

    server {
        listen 80;
        listen 443 ssl;
        server_name lua-load-balancer;

        location / {
            content_by_lua_file /path/to/lua-resty-upstream/example/load-balancer.lua;
        }

    }

    # HTTP origins
    server {
        listen 81;
        location / {
            echo 'foo';
        }
    }
    server {
        listen 82;
        location / {
            echo 'bar';
        }
    }

    # HTTPS origins
    server {
        listen 83 ssl;
        location / {
            echo 'foo-ssl';
        }
    }

    server {
        listen 84 ssl;
        location / {
            echo 'bar-ssl';
        }
    }


    server {
        listen 8080;
        server_name api;

        location = /pools {
            content_by_lua '
                local cjson = require("cjson")
                local pools, err = api:get_pools()
                if not pools then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                else
                    ngx.print(cjson.encode(pools))
                end
            ';
        }

        location ~ ^/down_host/([^[/]+)/([^[/]+)$ {
            content_by_lua '
                local cjson = require("cjson")
                local host = ngx.var[2]
                local pool = ngx.var[1]
                local ok, err = api:down_host(pool, host)
                if not ok then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                end
            ';
        }
        location ~ ^/up_host/([^[/]+)/([^[/]+)$ {
            content_by_lua '
                local cjson = require("cjson")
                local host = ngx.var[2]
                local pool = ngx.var[1]
                local ok, err = api:up_host(pool, host)
                if not ok then
                    ngx.print(cjson.encode(err))
                    ngx.status = 500
                end
            ';
        }
    }
}

